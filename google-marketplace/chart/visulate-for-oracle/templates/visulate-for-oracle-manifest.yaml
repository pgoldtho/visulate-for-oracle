---
#####################################
# Secrets and ConfigMaps
#####################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-ubbagent-config
data:
  config.yaml: |-
{{ .Files.Get "ubbagent-config.yaml" | indent 4 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-empty-database-array
type: Opaque
stringData:
  database.js: |-
{{ .Files.Get "database.js" | indent 4 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-empty-endpoints
type: Opaque
stringData:
  endpoints.json: |-
{{ .Files.Get "endpoints.json" | indent 4 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-tls
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: visulate-for-oracle
data:
  tls.key: |
{{ .Values.tls.base64EncodedPrivateKey | indent 4 }}
  tls.crt: |
{{ .Values.tls.base64EncodedCertificate | indent 4 }}
type: kubernetes.io/tls
---
#####################################
# API Server
#####################################
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.apiServer.label }}-svc
  labels:
    app: {{ .Chart.Name }}
    component: {{ .Values.apiServer.label }}
spec:
  type: NodePort
  selector:
    app: {{ .Chart.Name }}
    component: {{ .Values.apiServer.label }}
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.apiServer.label }}
  ports:
    - protocol: TCP
      port: {{ .Values.apiServer.port }}
      targetPort: {{ .Values.apiServer.port }}
      name: {{ .Chart.Name }}-{{ .Values.apiServer.label }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.apiServer.label }}
  labels: &ServerDeploymentLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.apiServer.label }}
    app: {{ .Chart.Name }}
    component: {{ .Values.apiServer.label }}
spec:
  replicas: {{ .Values.apiServer.replicas }}
  selector:
    matchLabels: *ServerDeploymentLabels
  template:
    metadata:
      labels: *ServerDeploymentLabels
    spec:
      containers:
        # API Server
        - name: {{ .Chart.Name }}-{{ .Values.apiServer.label }}
          image: "{{ .Values.apiServer.image.repo }}:{{ .Values.apiServer.image.tag }}"
          volumeMounts:
            - name: config-database-volume
              mountPath: /visulate-server/config/database.js
              subPath: database.js
            - name: logfiles
              mountPath: /visulate-server/logs
            - name: ubbagent-config
              mountPath: /etc/ubbagent/
            - name: ubbagent-state
              mountPath: /var/lib/ubbagent
          ports:
            - containerPort: {{ .Values.apiServer.port }}
          env:
            - name: CORS_ORIGIN_WHITELIST
              value: "{{ .Values.apiServer.corsOriginWhitelist }}"
          livenessProbe:
            httpGet:
              path: /endpoints/
              port: {{ .Values.apiServer.port }}
            initialDelaySeconds: 40
            periodSeconds: 60
            timeoutSeconds: 20
        # Sidecar containers
        # Echo logs to stdout where Stackdriver can access them
        - name: message-log
          image: "{{ .Values.util.image }}"
          command: ["/bin/sh"]
          args: ["-c", "tail -n+1 -f /visulate-server/logs/*.log"]
          volumeMounts:
            - name: logfiles
              mountPath: /visulate-server/logs
        # Google ubbagent
        - name: ubbagent-db-connections
          image: "{{ .Values.util.image }}"
          command: ["/bin/sh"]
          args: ["-c", "while sleep 3600; do (./ubbagent-database_connections.sh 'http://localhost:{{ .Values.apiServer.port }}/api' 'http://localhost:4567/report' &) ; done"]
        - name: ubbagent
          image: "{{ .Values.ubbagent.image }}"
          env:
          - name: AGENT_CONFIG_FILE
            value: /etc/ubbagent/config.yaml
          - name: AGENT_LOCAL_PORT
            value: "4567"
          - name: AGENT_STATE_DIR
            value: /var/lib/ubbagent
          - name: AGENT_REPORT_DIR
            value: /var/lib/ubbagent/reports
          - name: AGENT_ENCODED_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.reportingSecret }}
                key: reporting-key
          - name: AGENT_CONSUMER_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.reportingSecret }}
                key: consumer-id
          volumeMounts:
            - name: ubbagent-config
              mountPath: /etc/ubbagent
            - name: ubbagent-state
              mountPath: /var/lib/ubbagent
      volumes:
        - name: config-database-volume
          secret:
            secretName: {{ .Release.Name }}-empty-database-array
        - name: logfiles
          emptyDir: {}
        - name: ubbagent-state
          emptyDir: {}
        - name: ubbagent-config
          configMap:
            name: {{ .Release.Name }}-ubbagent-config
---
#####################################
# UI
#####################################
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.ui.label }}-svc
  labels:
    app: {{ .Chart.Name }}
    component: {{ .Values.ui.label }}
spec:
  type: NodePort
  selector:
    app: {{ .Chart.Name }}
    component: {{ .Values.ui.label }}
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.ui.label }}
  ports:
    - protocol: TCP
      port: {{ .Values.ui.port }}
      targetPort: {{ .Values.ui.port }}
      name: {{ .Chart.Name }}-{{ .Values.ui.label }}
    - protocol: TCP
      port: {{ .Values.ui.tlsPort }}
      targetPort: {{ .Values.ui.port }}
      name: {{ .Chart.Name }}-{{ .Values.ui.label }}-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.ui.label }}
  labels: &UiDeploymentLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.ui.label }}
    app: {{ .Chart.Name }}
    component: {{ .Values.ui.label }}
spec:
  replicas: {{ .Values.ui.replicas }}
  selector:
    matchLabels: *UiDeploymentLabels
  template:
    metadata:
      labels: *UiDeploymentLabels
    spec:
      containers:
        - name: {{ .Chart.Name }}-{{ .Values.ui.label }}
          image: "{{ .Values.ui.image.repo }}:{{ .Values.ui.image.tag }}"
          volumeMounts:
            - name: logfiles
              mountPath: /var/log/nginx
          ports:
            - containerPort: {{ .Values.ui.port }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.ui.port }}
            initialDelaySeconds: 40
            periodSeconds: 20
            timeoutSeconds: 3
        # Sidecar containers
        # Echo logs to stdout where Stackdriver can access them
        - name: message-log
          image: "{{ .Values.util.image }}"
          args: [/bin/sh, -c, 'tail -n+1 -f /var/log/nginx/*.log']
          volumeMounts:
            - name: logfiles
              mountPath: /var/log/nginx
      volumes:
        - name: logfiles
          emptyDir: {}
---
#####################################
# Query Engine
#####################################
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.sql.label }}-svc
  labels:
    app: {{ .Chart.Name }}
    component: {{ .Values.sql.label }}
spec:
  type: NodePort
  selector:
    app: {{ .Chart.Name }}
    component: {{ .Values.sql.label }}
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.sql.label }}
  ports:
    - protocol: TCP
      port: {{ .Values.sql.port }}
      targetPort: {{ .Values.sql.port }}
      name: {{ .Chart.Name }}-{{ .Values.sql.label }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.sql.label }}
  labels: &SqlDeploymentLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.sql.label }}
    app: {{ .Chart.Name }}
    component: {{ .Values.sql.label }}
spec:
  replicas: {{ .Values.sql.replicas }}
  selector:
    matchLabels: *SqlDeploymentLabels
  template:
    metadata:
      labels: *SqlDeploymentLabels
    spec:
      containers:
        - name: {{ .Chart.Name }}-{{ .Values.sql.label }}
          image: "{{ .Values.sql.image.repo }}:{{ .Values.sql.image.tag }}"
          volumeMounts:
            - name: config-endpoints-volume
              mountPath: /query-engine/sql2csv/config/endpoints.json
              subPath: endpoints.json
          ports:
            - containerPort: {{ .Values.sql.port }}
          env:
            - name: CORS_ORIGIN_WHITELIST
              value: "{{ .Values.apiServer.corsOriginWhitelist }}"
          livenessProbe:
            httpGet:
              path: /sql/healthz
              port: {{ .Values.sql.port }}
            initialDelaySeconds: 40
            periodSeconds: 60
            timeoutSeconds: 20
      volumes:
        - name: config-endpoints-volume
          secret:
            secretName: {{ .Release.Name }}-empty-endpoints
---
#####################################
# Ingress
#####################################
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ .Release.Name }}-igs
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: visulate-for-oracle
spec:
  tls:
    - secretName: {{ .Release.Name }}-tls
  backend:
    serviceName: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.ui.label }}-svc
    servicePort: {{ .Values.ui.port }}
  rules:
    - http:
        paths:
          - path: "/*"
            backend:
              serviceName: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.ui.label }}-svc
              servicePort: {{ .Values.ui.port }}
          - path: "/api/*"
            backend:
              serviceName: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.apiServer.label }}-svc
              servicePort: {{ .Values.apiServer.port }}
          - path: "/endpoints/*"
            backend:
              serviceName: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.apiServer.label }}-svc
              servicePort: {{ .Values.apiServer.port }}
          - path: "/api-docs/*"
            backend:
              serviceName: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.apiServer.label }}-svc
              servicePort: {{ .Values.apiServer.port }}
          - path: "/find/*"
            backend:
              serviceName: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.apiServer.label }}-svc
              servicePort: {{ .Values.apiServer.port }}
          - path: "/ddl/*"
            backend:
              serviceName: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.apiServer.label }}-svc
              servicePort: {{ .Values.apiServer.port }}
          - path: "/sql/*"
            backend:
              serviceName: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.sql.label }}-svc
              servicePort: {{ .Values.sql.port }}
          - path: "/database/*"
            backend:
              serviceName: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.ui.label }}-svc
              servicePort: {{ .Values.ui.port }}
